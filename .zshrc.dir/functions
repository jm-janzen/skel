#!/bin/zsh

# reference to dir containing source files
zshdir=${0:h}

# reference to dir containing completion function files
fpath+="`dirname $0`/completions"

### shortcut functions to edit zsh configurations
function zedit () {
    file=$1
    case "$file" in
        aliases|functions|zshrc|completions)
            vim ${zshdir}/${file}
            ;;
        *)
            echo "No argument given"
            ;;
    esac
}

### shortcut functions to edit vim configurations
function vedit () {
    file=$1
    case "$file" in
        plugins|options|functions|mappings|autocommands)
            echo vim "${HOME}/.vimrc.dir/init/${file}.vim"
            vim "${HOME}/.vimrc.dir/init/${file}.vim"
            ;;
        vimrc)
            vim "${HOME}/.${file}"
            ;;
        colorschemes)
            vim "${HOME}/.vim/colors/"
            ;;
        *)
            echo "No argument given"
            ;;
    esac
}


function md() {
    if [[ ! -z "/usr/local/bin/mdless" ]]; then
        mdless --no-pager $1
    else
        echo "mdless not installed - run 'gem install mdless'"
    fi
}

# TODO check if screen session of <fruit> name already exists
# before creating a same-named session.
function scn() {

    fruits=(
        banana      mango       orange
        peach       cherry      pineapple
        watermelon  rasberry    strawberry
        grape       grapefruit  pomegranate)

    numFruits=${#fruits}

    if (( $# > 0 )) {
        screen $@
    } else {
        name=$fruits[$[RANDOM % numFruits + 1]]

        screen -S "$name"
    }
}

### convenience functions
function dump() {
    if [[ -d $HOME/bups/$1 ]]; then
        mv -i $1 $HOME/bups/$1
    else
        mkdir -p $HOME/bups/$1 && mv -i $1 $HOME/bups/$1
    fi
}
function dump-empty() {
    mv $HOME/bups/* $HOME/.bups/
}
function dump-ls() {
    ls -la $HOME/bups/
}
function notes() {
    if [[ -z $1 ]]; then
        echo 'Usage:\n\t notes [OPTION] [FILE] [PATTERN]'
    elif [[ $1 =~ "-h" ]] || [[ $1 =~ "--help" ]]; then
        cat << EOF
Usage: notes [OPTION] [FILE] [PATTERN]
    [OPTION]
        -h, --help
            Show this help text.
        -l, --list
            Show the list of viewable, searchable, and editable files.
        -e, --edit
            Edit the file in place, using default editor.  Depending on the
            set by 'update-alternatives --config editor' in /usr/bin/editor
            (Debian specific), this action may also create a blank help file
            of this name, if none exists.
        -f, --find
            Usage: \`notes -f <pattern>'.  Views all files containing <pattern>
            in less.  Use \`n' and \`N' to jump back and forth between matches
            within a file, \`:n' and \`:p' to navigate back and forth between
            files with matches, and \`q' to exit.
        -s, --subject
            Look into subject directory for topic, specific to that subject.
            Example usage: 'notes --subject linux cmds'

    [FILE]
        Any file directly within the '$HOME/notes' directory.

    [PATTERN]
        Any single word pattern, or if enclosed in single quotes, any standard
        regex expression accepted by the system's version of grep.
EOF
    elif [[ $1 =~ "-l" ]] || [[ $1 =~ "--list" ]]; then
        echo 'List of Help Files:\n------------------'
        for n in `\ls ${HOME}/notes`; do
            note=${HOME}/notes/${n}

            if [[ -d $note ]]; then
                echo $note | awk -F '.*/' '
                    /[/]/ { print "\033[34m"$2"\033[0m" }
                '
                for nn in `\ls $note`; do
                    nn=`basename $(\ls -p ${note}/${nn})`
                    echo $nn | awk -F '.mkd' '
                        /.mkd/ { print "`-"$1 }
                    '
                done
            elif [[ -e $note ]]; then
                note=`basename $(\ls -p $note)`
                echo $note | awk -F '.mkd' '
                    /.mkd/ { print $1 }
                '
            fi
        done
    elif [[ $1 =~ "-f" ]] || [[ $1 =~ "--find" ]]; then
        if [[ $# -lt 2 ]]; then
            echo 'Usage:  notes -f <pattern>'
        else
            echo grepping...
            grep -rl $HOME/notes/ --exclude-dir=".git" -e "$2" | xargs less -R --LONG-PROMPT --pattern="$2"
            #echo "grep -rl $HOME/notes/ --exclude-dir=.git -e $2 |xargs less -R --LONG-PROMPT --pattern=$2"
        fi
    elif [[ -z $2 ]]; then
        less ${HOME}/notes/${1}.mkd
    else
        if [[ $1 =~ "-e" ]] || [[ $1 =~ "--edit" ]]; then
            /usr/bin/editor ${HOME}/notes/${2}.mkd
        elif [[ $1 =~ "-s" ]] || [[ $1 =~ "--subject" ]]; then
            less ${HOME}/notes/${2}/${3}.mkd
        fi
    fi
}

#
# A completely useless function, that just does what the name implies
#
function look-busy() {
    while (true) {
        for i in $(find . -name \*); do
            \ls $i
            for j in $i; do
                if [[ -d $j ]]; then
                    \ls -a $j
                else
                    od $j --width=40  -A x -t x1z -v | awk -F=' ' '{ print $0 }' | grep --color -e '>.\+'
                    sleep $[RANDOM % 3]
                fi
            done
        done
    }
}

function calc() {
    echo "$@" | bc
}

function grade() {
    print "scale=2; $1 / $2 * 100" | bc
}

function hgrep() {
    grep "$*" $HISTFILE --colo=always
}

function hless() {
    less -JMSR --pattern="$*" $HISTFILE
}

# Highlight pattern, but don't suppress other lines
function highlight() {
    grep -Pe "$1|$" --color=always
}

# Show highlighted pattern with some context.
#
# Examples:
#   <cmd> | snip f0\+       # 1 line  around matches (default)
#   <cmd> | snip f0\+ 2     # 2 lines around matches
#   <cmd> | snip f0\+ 1 1   # 1 line around match (like default)
#   <cmd> | snip f0\+ 0 1   # 1 line below  match
#   <cmd> | snip f0\+ 1 0   # 1 line above  match
#   <cmd> | snip f0\+ 0     # only matching lines (just like grep)
#   <cmd> | snip f0\+ 0 0   # only matching lines (just like grep)
function snip() {
    if [[ $# -eq 2 ]]
    then
        flags="-C$2"
    elif [[ $# -eq 3 ]]
    then
        flags="-B$2 -A$3"
    else
        flags="-C1"
    fi

    grep -Pe "$1" $( echo "${flags}" ) | grep -Pe "$1|$" --colo=always | less -RFX
}

function vunmerged() {
    vim $(git status -bs | awk '/^(UU|AA)/ { print $2 }') -c'/<<<<<<<\|=======\|>>>>>>>'
}

function jq-csv() {
    if (( $# < 1 )) {
        echo 'Usage: jq-csv <CSV_FILE> [JQ_COMMAND] [JQ_OPTIONS]'
        echo -e "\n\tExample: jq-csv <(echo -e \"foo,bar\\\n1,2\") '.[].foo'  # Prints \"1\""
        return 1
    }

    CSV_FILE="${1}"
    JQ_COMMAND="${2}"
    JQ_OPTIONS="${3}"

    if (( $# < 2 )) {
        JQ_COMMAND=.  # Print all
    }
    if (( $# < 3 )) {
        JQ_OPTIONS='-c'  # Compact output
    }

    ruby \
        -e "require 'csv'; require 'json'; f = ARGV[0]" \
        -e 'puts CSV.parse(File.open(f), {headers: true}).map(&:to_h).to_json rescue puts "Unable to parse or read #{f}"' \
        "${CSV_FILE}" \
        | jq $JQ_COMMAND $JQ_OPTIONS
}

function ls() {
    if (( $(lolcat -v &>/dev/null; echo $?) != 0 )) {
        command ls $@
    }

    odds=50
    roll=$(shuf -i $odds-100 -n 1)
    if (( $roll == 100 )) {
        command ls $@ | lolcat
    } else {
        command ls $@
    }
}

function kexec() {
    if [[ -z "/usr/bin/kubectl" ]]
    then
        echo "kubectl not installed"
        return 1
    fi

    if [[ $# -lt 1 ]]
    then
        echo -e "Usage:\n\tkattach <pod> [command]"
        return 1
    fi

    pod=$(kubectl get po | grep -w Running | grep "^$1" | cut -d' ' -f1 )

    if [[ $# -gt 1 ]]
    then
        kubectl exec -it $pod -- ${@:2}
    else
        kubectl exec -it $pod -- bash
    fi
}

function git-clone-temp() {
	repo_name="$1"
	ref_name="$2"
	repo_path=''
	if [[ $# -gt 1 ]]
	then
		repo_path="/tmp/${repo_name}_${ref_name}"
		git clone "git@github.com:tempo-io/${repo_name}" "$repo_path" --branch="$ref_name"
	elif [[ $# -eq 1 ]]
	then
		repo_path="/tmp/${repo_name}"
		git clone "git@github.com:tempo-io/${repo_name}" "$repo_path"
	else
		echo 'Usage: git-clone-temp <REPO_NAME> [BRANCH_NAME]'
		return 1
	fi

	cd "$repo_path"
}

function cat() {
	if [[ $# -eq 1 && "$1" = *\.(md|mkd|markdown) ]]
	then
		# TODO Prompt
		mdcat "$1"
	else
		command cat $@
	fi
}

function cd() {
	# If dir specified and not exists and no flags
	if [[ $# -gt 0 && ! -d $1 && $1 != -* ]]
	then
		prompt "The directory '${1}' does not exist - create it?" && mkdir -p $1
	fi

	# If more than one args and no flags
	if [[ $# -gt 1 && $1 != -* ]]
	then
		cd_command $@
		return $?
	fi

	chdir $@
}

function car() {
	echo "Vroom! Vrooom! I'm a car! I don't know how to read '$@'! Vroom sputter stall!! :("
	return 1
}

local function cd_command() {

	dir="${@:1:1}"
	cmd="${@:2:1}"
	opt="${@:3}"

	chdir "${dir}"

	command $cmd $opt

	exit_code=$?

	chdir - &>/dev/null

	return $exit_code
}

local function prompt() {
    while true; do
        read yn\?"$1 [y]es or [n]o "
        case $yn in
            [Yy]* ) return 0;;
            [Nn]* ) return 1;;
            * ) echo "Please answer yes or no.";;
        esac
function wait() {
    seconds=${1:-1}
    char=${2:-''}
    for i in $(seq $seconds -1 1)
    do
        echo -n "$char"
        sleep 1
    done
}
